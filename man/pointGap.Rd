% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/number_perc.R, R/point_error.R, R/point_gap.R,
%   R/pvalue.R
\name{numPer}
\alias{numPer}
\alias{pointErr}
\alias{pointGap}
\alias{pval}
\title{tblString vectors}
\usage{
numPer(
  numerator = integer(),
  denominator = integer(),
  point_label = "Count",
  gap_label = "\%",
  brac_left = "(",
  brac_right = ")",
  max_decimals = 2,
  big_mark = ",",
  show_percent = TRUE
)

pointErr(
  point = numeric(),
  error = numeric(),
  style = "pm",
  point_label = "Estimate",
  error_label = "SE",
  brac_left = "(",
  brac_right = ")",
  max_decimals = 2,
  big_mark = ","
)

pointGap(
  point = numeric(),
  lower = numeric(),
  upper = numeric(),
  point_label = "Estimate",
  gap_label = "95\% CI",
  brac_left = "(",
  brac_right = ")",
  brac_middle = ", ",
  max_decimals = 2,
  big_mark = ",",
  ref_label = "ref",
  ref_value = 0
)

pval(
  x = double(),
  print_thresh = 0.001,
  column_label = "P-value",
  alpha_level = 0.05
)
}
\arguments{
\item{numerator}{positive count values.}

\item{denominator}{positive size values.}

\item{point_label}{character value describing the point value.}

\item{gap_label}{character value describing what goes inside of the
gap.}

\item{brac_left}{character value that will close brackets from the left.}

\item{brac_right}{character value that will close brackets from the right.}

\item{max_decimals}{an integer value that will determine the maximum
number of decimals in the output. Larger numbers will not use the
maximum number of decimals in order to maintain the same, or at
least similar length as smaller numbers.}

\item{big_mark}{a character value used to separate number groups to the
left of the decimal point. See \link{prettyNum} for more details on this.
Set this input to '' to negate it's effect.}

\item{show_percent}{logical value. If \code{TRUE}, then a percent
sign is placed into the brackets of the \code{numPer} printed output.
if \code{FALSE}, then no percent sign is added to printed output.}

\item{point}{numeric vector of point estimates}

\item{error}{numeric vector of error estimates}

\item{style}{a character value indicating the style of the point error
vectors.}

\item{error_label}{character value describing the error value.}

\item{lower}{numeric vector of lower-bounds.}

\item{upper}{numeric vector of upper-bounds.}

\item{brac_middle}{character value that will separate values inside of
the bracket.}

\item{ref_label}{a character value used to describe the referent group
(if there is a referent group).}

\item{ref_value}{a numeric value that is assumed for the referent group.
For example, in logistic regression, the referent group is often
included in results with a referent odds ratio of 1.}

\item{x}{a numeric value or vector with values greater than 0
and less than 1.}

\item{print_thresh}{a numeric value indicating the lowest number that
should be displayed. Any numbers below this threshold will be
written as < threshold in the output.}

\item{column_label}{a character value that could be used as a
column header for the p-value in a published table.}

\item{alpha_level}{a numeric value indicating the nominal type
1 error rate for your analysis.}
}
\value{
\code{numPer()} returns a \code{numPer} vector of length equal to
the number of numerator/denominator pairs.

\code{pointGap} value(s).

a \code{pval} object
}
\description{
Scientific tables often include values of the form
estimate (lower value, upper value). It is somewhat tedious to work
with these values in R because to do so, one will usually have to
round their numbers evenly, then paste them into whatever bracket
notation is required by their target journal, and then struggle to
work with the resulting character strings because they can't treat
the character values as numeric. \code{tblString} vectors are meant
to make the  process of developing tables a little less painful.
The five core vector classes implemented are:
\itemize{
\item \code{pointGap}: estimate (interval)
-\code{numPer}: count (percent)
-\code{PointErr}: estimate (error) or estimate +/- error
-\code{fraction}: numerator / denominator
-\code{pval}: p-values
Each class has some helpful properties, e.g.
\item automatically round numeric values based on magnitude so that
tabulated values will have more or less the same width.
\item contain underlying numeric data that allows you to sort table
values or develop conditional formatting based on vector properties
(e.g., \link{pg_covers} for \code{pointGap} values.).
}
}
\section{Functions}{
\itemize{
\item \code{numPer}: 

\item \code{pointErr}: 

\item \code{pval}: 
}}

\note{
Although \code{tblStrings} objects contain numeric data, only the first 15
figures in the numeric values are retained. (this is because the data
are converted to a character strings). Accuracy beyond this level
of precision should not be expected, but should also not be needed
in most tabular summaries. The reason \code{tblStrings} values keep this
structure instead of the more flexible record style format (see
\link[vctrs:new_rcrd]{vctrs::new_rcrd}) is that record style objects are not easily passed
into tabulation functions such as \link[flextable:flextable]{flextable::flextable} and
\link[knitr:kable]{knitr::kable}.

the number of decimal digits to display is determined based
on the threshold value. For example, if you set threshold as 0.01,
then only 2 digits are shown. Similarly, a threshold of 0.001 will
lead to displaying 3 digits.
}
\examples{

counts <- c(1, 20, 40, 50)

denoms <- c(100, 100, 100, 100)

numPer(counts, denoms)


x <- rnorm(10)
y <- x + rnorm(10)

model <- lm(y~x)

est <- coef(model)['x']
ci <- confint(model)['x', ]

pointGap(point = est, lower = ci['2.5 \%'], upper = ci['97.5 \%'])



pval(1/2)
pval(0.0001)
pval(c(0.1, 0.01, 0.001, 0.0001))
pval(c(0.1, 0.01, 0.001, 0.0001), print_thresh = 0.01)

}
\seealso{
as_pointGap
}
